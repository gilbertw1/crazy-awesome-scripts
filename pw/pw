#!/bin/sh

# load mpw (master password) config
MPW_CONFIG=""
if [ ! -f ~/.mpw ]; then
    echo "~/.mpw does not exist!"
else
    MPW_CONFIG="$(cat ~/.mpw)"
fi

if [ ! -d ~/.password-store ]; then
    echo "~/.password-store does not exist!"
    exit
fi

# load pw domain cache if it exists
DOMAIN_CACHE=""
if [ -f ~/.pw-domain-cache ]; then
    DOMAIN_CACHE="$(cat ~/.pw-domain-cache)"
fi

# extract domain from url if it exists
URL="$1"
if [ ! -z "$URL" ]; then
    DOMAIN="$(echo "$URL" | awk -F/ '{print tolower($3)}' | rev | cut -d'.' -f1-2 | rev)"
    DOMAIN_CACHE_MATCH="$(echo "$DOMAIN_CACHE" | grep "^$DOMAIN\s")"
fi

# create a list of all pass entries
TERMS="$(find ~/.password-store/ -type f | cut -sd / -f 2- | sed "s/^.*password-store\///" | sed '/^\./ d' | sed "s/.gpg//")"


ACTIVE_ITEMS=0
# if url was provided, look it's domain up in the cache, and reorder the TERMS
if [ ! -z "$DOMAIN_CACHE_MATCH" ]; then
    for match in $(echo $DOMAIN_CACHE_MATCH | cut -d' ' -f2 | tr ',' '\n')
    do
        if [ ! -z "$(echo "$TERMS" | grep "^$match")" ]; then
            ((ACTIVE_ITEMS++))
            TERMS="$(echo "$TERMS" | sed "\:^$match:d")"
            TERMS=$(printf "$match\n$TERMS")
        fi
    done
fi

ACTIVE_FLAG=""
if [ "$ACTIVE_ITEMS" -gt 0 ]; then
    ACTIVE_FLAG="-a 0-$((ACTIVE_ITEMS-1))"
fi

# prompt the user to select a pass entry (interactive use fzf, otherwise use rofi)
if [[ -t 0 ]]; then
    MATCHING_TERM="$(echo "$TERMS" | fzf-tmux --prompt='site: ')"
else
    MATCHING_TERM="$(echo "$TERMS" | rofi -dmenu -i -lines 15 -width 50 $ACTIVE_FLAG -p 'site: ')"
fi

if [ $? -ne 0 ] || [ -z "$MATCHING_TERM" ]; then
    echo "Aborted selected password entry, exiting..."
    exit
fi

# if the domain exists, check and cache the selected term
if [ ! -z "$DOMAIN" ]; then
    if [ ! -z "$DOMAIN_CACHE_MATCH" ]; then
        if [ -z "$(echo "$DOMAIN_CACHE_MATCH" | grep "$MATCHING_TERM")" ]; then
            DOMAIN_CACHE_MATCH="$(printf "$DOMAIN_CACHE_MATCH,$MATCHING_TERM")"
            DOMAIN_CACHE="$(echo "$DOMAIN_CACHE" | sed "/^$DOMAIN/d")"
            printf "$DOMAIN_CACHE\n$DOMAIN_CACHE_MATCH" > ~/.pw-domain-cache
        fi
    else
        if [ -z "$DOMAIN_CACHE" ]; then
            printf "$DOMAIN $MATCHING_TERM" > ~/.pw-domain-cache
        else
            printf "$DOMAIN_CACHE\n$DOMAIN $MATCHING_TERM" > ~/.pw-domain-cache
        fi
    fi
fi

# retrieve password for entry
PASSWORD="$(pass $MATCHING_TERM)"

# look up matching mpw entry for password
MATCHING_ENTRY="$(echo "$MPW_CONFIG" | tr "\t" " " | tr -s ' ' | grep -i "^$PASSWORD\s" | head -n 1)"
# extract site from matching entry
MATCHING_SITE="$(echo "$MATCHING_ENTRY" | cut -d' ' -f1)"

# if matching site is empty then we have an actual password
if [ -z "$MATCHING_SITE" ]; then
    # put the password in the clipboard
    echo "$PASSWORD" | xsel --clipboard
else
    # if we have a matching site then prompt the user to enter the master password (interactive use normal prompt, otherwise use rofi)
    if [[ -t 0 ]]; then
        echo -n "Password:"
        read -s MASTER_PASSWORD
    else
        MASTER_PASSWORD="$(echo "" | rofi -password -dmenu -i -lines 1 -width 30 -p 'password: ')"
    fi

    # extract selected site value from mpw entry
    MATCHING_SITE_VALUE="$(echo "$MATCHING_ENTRY" | cut -d' ' -f2)"
    # extract matching site type from mpw entry (max, long, basic, etc)
    MATCHING_SITE_TYPE="$(echo "$MATCHING_ENTRY" | cut -d' ' -f3)"
    # extract the matching site counter from the mpw entry
    MATCHING_SITE_COUNTER="$(echo "$MATCHING_ENTRY" | cut -d' ' -f4)"

    # Invoke mpwc to generate site specific password and symbols
    MPWC_OUTPUT="$(echo "$MASTER_PASSWORD" | mpwc -t "$MATCHING_SITE_TYPE" -c "$MATCHING_SITE_COUNTER" "$MATCHING_SITE_VALUE" -i)"
    PASSWORD="$(echo "$MPWC_OUTPUT" | cut -d' ' -f2)"
    SYMBOLS="$(echo "$MPWC_OUTPUT" | cut -d "]" -f1 | cut -c 2-)"

    # put the password in the clipboard
    echo "$PASSWORD" | xsel --clipboard
fi

# Display popup notification, optionally with mpw symbols if master password
if [ -z $SYMBOLS ]; then
    notify-send "./pw ($MATCHING_TERM)" "Copied password to clipboard"
else
    notify-send "./pw ($MATCHING_TERM)" "Copied password to clipboard ($SYMBOLS)"
fi

# Verify clipster is running, exit otherwise
clipster -o > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo 'Not using clipster, password will not be removed from clipboard'
    exit
fi

# remove clip from clipster after 30 seconds
echo ""
echo "Deleting password from clipoard in 30 seconds..."
sleep 30
echo -n "$PASSWORD" | clipster -r --clipboard
