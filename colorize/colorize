#!/bin/sh

COLORS_FOLDER="$HOME/.colors"
if [ ! -d "$COLORS_FOLDER" ]; then
    echo "Colors folder does not exist...exiting ($COLORS_FOLDER)"
    exit;
fi;

THEMES="$(find "$COLORS_FOLDER" -maxdepth 1 -type d -printf "%f\n" | tail -n +2)"

# prompt the user to select a theme (interactive use fzf, otherwise use rofi)
if [[ -t 0 ]]; then
    THEME="$(echo "$THEMES" | fzf-tmux --prompt='theme: ')"
else
    THEME="$(echo "$THEMES" | rofi -dmenu -i -lines 15 -width 50 $ACTIVE_FLAG -p 'theme')"
fi

BASE_FOLDER="$HOME/.colors/base"
THEME_FOLDER="$HOME/.colors/$THEME"

if [ -d "$THEME_FOLDER" ]; then
    echo "Using theme folder: $THEME_FOLDER"
else
    echo "Theme folder does not exist...exiting ($THEME_FOLDER)"
    exit;
fi;

export SUBS_MAPPINGS="$(cat "$BASE_FOLDER/mappings.txt" "$THEME_FOLDER/mappings.txt")"

theme_or_base () {
  BASE_FILE="$BASE_FOLDER/$1"
  THEME_FILE="$THEME_FOLDER/$1"
  if [ -f "$THEME_FILE" ]; then
    echo "$THEME_FILE"
  else
    echo "$BASE_FILE"
  fi;
}

replace_file_theme_section () {
  COMMENT="${3:-###}"
  TEMP_FILE="/tmp/theme-temp"
  subs $2 $TEMP_FILE
  start='^'"$COMMENT"' COLORIZE SECTION START$'
  end='^'"$COMMENT"' COLORIZE SECTION END$'
  sed -i -e "/$start/,/$end/{ /$start/{p; r $TEMP_FILE
          }; /$end/p; d }" $1
  rm $TEMP_FILE
}

# Colorize Emacs
echo "Theming emacs..."
EMACS_COLOR_FILE="$(theme_or_base "emacs/emacs.el")"
if [ -f "$EMACS_COLOR_FILE" ]; then
    emacsclient --eval "$(subs "$EMACS_COLOR_FILE" -)"
fi;
echo "Done theming emacs."

# Colorize Alacritty
echo "Theming alacritty..."
ALACRITTY_COLOR_FILE="$(theme_or_base "alacritty/alacritty.yml")"
ALACRITTY_CONFIG_FILE="$HOME/.config/alacritty/alacritty.yml"
if [ -f "$ALACRITTY_COLOR_FILE" ]; then
    replace_file_theme_section "$ALACRITTY_CONFIG_FILE" "$ALACRITTY_COLOR_FILE"
    echo "Done theming alacritty."
else
    echo "Failed to theme alacritty. File does not exist: $ALACRITTY_COLOR_FILE."
fi;

# Colorize Tmux -- TODO: REPLACE
echo "Theming tmux..."
TMUX_COLOR_FILE="$(theme_or_base "tmux/.tmux.conf")"
TMUX_CONFIG_FILE="$HOME/.tmux.conf"
if [ -f "$TMUX_COLOR_FILE" ]; then
    subs "$TMUX_COLOR_FILE" "/var/tmp/tmux-colors.tmp"
    tmux source-file "/var/tmp/tmux-colors.tmp"
    rm "/var/tmp/tmux-colors.tmp"
    replace_file_theme_section "$TMUX_CONFIG_FILE" "$TMUX_COLOR_FILE"
    echo "Done theming tmux."
else
    echo "Failed to theme tmux. File does not exist: $TMUX_COLOR_FILE."
fi;


# Colorize Vim
echo "Theming vim..."
VIM_COLOR_FILE="$(theme_or_base "vim/init.vim")"
VIM_CONFIG_FILE="$HOME/.config/nvim/init.vim"
if [ -f "$VIM_COLOR_FILE" ]; then
    replace_file_theme_section "$VIM_CONFIG_FILE" "$VIM_COLOR_FILE" '"""'
    echo "Done theming vim."
else
    echo "Failed to theme vim. File does not exist: $VIM_COLOR_FILE."
fi;

# Colorize Tint2
echo "Theming tint2..."
TINT2_COLOR_FILE="$(theme_or_base "tint2/tint2rc")"
TINT2_CONFIG_FILE="$HOME/.config/tint2/tint2rc"
if [ -f "$TINT2_COLOR_FILE" ]; then
    replace_file_theme_section "$TINT2_CONFIG_FILE" "$TINT2_COLOR_FILE"
    killall tint2
    start tint2
    echo "Done theming tint2."
else
    echo "Failed to theme tint2. File does not exist: $TINT2_COLOR_FILE."
fi;


# Colorize Rofi
echo "Theming rofi..."
ROFI_THEME_COLOR_FILE="$(theme_or_base "rofi/theme.rasi")"
ROFI_THEME_CONFIG_FILE="$HOME/.config/rofi/theme.rasi"
if [ -f "$ROFI_THEME_COLOR_FILE" ]; then
    replace_file_theme_section "$ROFI_THEME_CONFIG_FILE" "$ROFI_THEME_COLOR_FILE" '\/\/\/'
    echo "Done theming rofi."
else
    echo "Failed to theme rofi. File does not exist: $ROFI_COLOR_FILE."
fi;

# Colorize GTK Theme
echo "Setting gtk theme..."
GTK_THEME_COLOR_FILE="$(theme_or_base "gtk/theme")"
if [ -f "$GTK_THEME_COLOR_FILE" ]; then
    xfconf-query -c xsettings -p /Net/ThemeName -s "$(subs "$GTK_THEME_COLOR_FILE" -)"
fi;

# Colorize GTK Icons
GTK_ICONS_COLOR_FILE="$(theme_or_base "gtk/icons")"
if [ -f "$GTK_ICONS_COLOR_FILE" ]; then
    xfconf-query -c xsettings -p /Net/IconThemeName -s "$(subs "$GTK_ICONS_COLOR_FILE" -)"
fi;
echo "Done setting gtk theme."

# Colorize Wallpaper
echo "Setting wallpaper..."
WALLPAPER_COLOR_FILE="$(theme_or_base "wallpaper/wallpaper.txt")"
if [ -f "$WALLPAPER_COLOR_FILE" ]; then
   feh --bg-fill "$(subs "$WALLPAPER_COLOR_FILE" - | tr -d "[:space:]")"
fi;
echo "Done setting wallpaper."

# Colorize Xmobar
echo "Theming xmobar..."
XMOBAR_COLOR_FILE="$(theme_or_base "/xmobar/xmobarrc")"
XMOBAR_CONFIG_FILE="$HOME/.config/xmobar/xmobarrc"
if [ -f "$XMOBAR_COLOR_FILE" ]; then
    subs $XMOBAR_COLOR_FILE $XMOBAR_CONFIG_FILE
    xmonad --restart
    echo "Done theming xmobar."
else
    echo "Failed to theme xmobar. File does not exist: $XMOBAR_COLOR_FILE"
fi;

# Colorize XMonad
echo "Theming xmonad..."
XMONAD_COLOR_FILE="$(theme_or_base "/xmonad/xmonad.hs")"
XMONAD_CONFIG_FILE="$HOME/.xmonad/xmonad.hs"
if [ -f "$XMONAD_COLOR_FILE" ]; then
    replace_file_theme_section "$XMONAD_CONFIG_FILE" "$XMONAD_COLOR_FILE" "---"
    xmonad --restart
    echo "Done theming xmonad."
else
    echo "Failed to theme xmonad. File does not exist: $XMONAD_COLOR_FILE"
fi;

# Colorize Dunst
echo "Theming dunst..."
DUNST_COLOR_FILE="$(theme_or_base "/dunst/dunstrc")"
DUNST_CONFIG_FILE="$HOME/.config/dunst/dunstrc"
if [ -f "$DUNST_COLOR_FILE" ]; then
    replace_file_theme_section "$DUNST_CONFIG_FILE" "$DUNST_COLOR_FILE"
    killall dunst
    notify-send "Theming Done."
    echo "Done theming dunst."
else
    echo "Failed to theme dunst. File does not exist: $DUNST_COLOR_FILE"
fi;

# Colorize Lock Screen
echo "Theming lock screen..."
LOCK_COLOR_FILE="$(theme_or_base "/lock/start-locker.sh")"
LOCK_CONFIG_FILE="$HOME/bin/start-locker.sh"
if [ -f "$LOCK_COLOR_FILE" ]; then
    replace_file_theme_section "$LOCK_CONFIG_FILE" "$LOCK_COLOR_FILE"
    echo "Done theming lock screen."
else
    echo "Failed to theme lock screen. File does not exist: $XMONAD_COLOR_FILE"
fi;
