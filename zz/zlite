#!/bin/bash

DATAFILE="${_Z_DATA:-$HOME/.z}"

# if symlink, dereference
[ -h "$DATAFILE" ] && DATAFILE=$(readlink "$DATAFILE")

# bail if we don't own ~/.z and $_Z_OWNER not set
[ -z "$_Z_OWNER" -a -f "$DATAFILE" -a ! -O "$DATAFILE" ] && return

Z_DIRS=""
while read line; do
  # only count directories
  [ -d "${line%%\|*}" ] && Z_DIRS+="${line}"$'\n'
done < "$DATAFILE"

DIRS="$(echo "$Z_DIRS" | awk -v t="$(date +%s)" -v list="1" -v typ="frecent" -v q="$1" -F"|" '
    function frecent(rank, time) {
        # relate frequency and time
        dx = t - time
        if( dx < 3600 ) return rank * 4
        if( dx < 86400 ) return rank * 2
        if( dx < 604800 ) return rank / 2
        return rank / 4
    }
    function output(files, out, common) {
        # list or return the desired directory
        if( list ) {
            cmd = "sort -n"
            for( x in files ) {
                if( files[x] ) printf "%-10s %s\n", files[x], x | cmd
            }
            if( common ) {
                printf "%-10s %s\n", "common:", common > "/dev/stderr"
            }
        } else {
            if( common ) out = common
            print out
        }
    }
    function common(matches) {
        # find the common root of a list of matches, if it exists
        for( x in matches ) {
            if( matches[x] && (!short || length(x) < length(short)) ) {
                short = x
            }
        }
        if( short == "/" ) return
        # use a copy to escape special characters, as we want to return
        # the original. yeah, this escaping is awful.
        clean_short = short
        gsub(/\[\(\)\[\]\|\]/, "\\\\&", clean_short)
        for( x in matches ) if( matches[x] && x !~ clean_short ) return
        return short
    }
    BEGIN {
        gsub(" ", ".*", q)
        hi_rank = ihi_rank = -9999999999
    }
    {
        if( typ == "rank" ) {
            rank = $2
        } else if( typ == "recent" ) {
            rank = $3 - t
        } else rank = frecent($2, $3)
        if( $1 ~ q ) {
            matches[$1] = rank
        } else if( tolower($1) ~ tolower(q) ) imatches[$1] = rank
        if( matches[$1] && matches[$1] > hi_rank ) {
            best_match = $1
            hi_rank = matches[$1]
        } else if( imatches[$1] && imatches[$1] > ihi_rank ) {
            ibest_match = $1
            ihi_rank = imatches[$1]
        }
    }
    END {
        # prefer case sensitive
        if( best_match ) {
            output(matches, best_match, common(matches))
        } else if( ibest_match ) {
            output(imatches, ibest_match, common(imatches))
        }
    }
')"

echo "$DIRS"